syntax = "proto3";

package lockstep;

option go_package = "./lockstep";
option csharp_namespace = "LockStep.Protocol";

// 错误码定义
enum ErrorCode {
    ERROR_CODE_SUCC = 0;              // 成功
    ERROR_CODE_UNKNOWN = 1;           // 未知错误
    ERROR_CODE_INVALID_TOKEN = 2;     // token 无效或过期
    ERROR_CODE_NOT_AUTHORIZED = 3;    // 无权限
    ERROR_CODE_ROOM_NOT_FOUND = 4;    // 房间不存在
    ERROR_CODE_ROOM_FULL = 5;         // 房间已满
    ERROR_CODE_PLAYER_NOT_FOUND = 6;  // 玩家不存在
    ERROR_CODE_ALREADY_IN_ROOM = 7;   // 玩家已在房间
    ERROR_CODE_NOT_IN_ROOM = 8;       // 玩家不在房间
}

// 统一响应基类
message BaseResponse {
    ErrorCode error_code = 1;      // 错误码
    string error_message = 2;      // 错误描述（可选，调试用）
}

// ==================== 请求/响应消息 ====================

message LoginRequest {
    string token = 1;
    int32 player_id = 2;
}

message LoginResponse {
    BaseResponse base = 1;
    int32 player_id = 2;
}

message LogoutRequest {}
message LogoutResponse {
    BaseResponse base = 1;
}

message ReadyRequest {
    bool ready = 1;
}
message ReadyResponse {
    BaseResponse base = 1;
}

message BroadcastRequest {
    bytes data = 1;
}
message BroadcastResponse {
    BaseResponse base = 1;
}

message FrameRequest {
    int32 frame_id = 1;
    int32 count = 2;
}
message FrameResponse {
    BaseResponse base = 1;
    repeated FrameMessage frames = 2;
}

// ==================== 游戏内状态消息 ====================

message GameStartMessage {
    int32 current_frame_id = 1;
    bool game_already_running = 2;
    uint32 ready_players = 3;
    uint32 min_players = 4;
}

enum PlayerStatus {
    PLAYER_STATUS_ONLINE = 0;
    PLAYER_STATUS_READY = 1;
    PLAYER_STATUS_OFFLINE = 2;
}

message Player {
    int32 player_id = 1;
    PlayerStatus status = 2;
}

message PlayerStateMessage {
    int32 player_id = 1;
    PlayerStatus status = 2;
    string reason = 3;
}

enum RoomStatus {
    ROOM_STATUS_IDLE = 0;
    ROOM_STATUS_WAITING = 1;
    ROOM_STATUS_RUNNING = 2;
    ROOM_STATUS_ENDED = 3;
}

message RoomStateMessage {
    string room_id = 1;
    RoomStatus status = 2;
    int32 current_players = 3;
    int32 max_players = 4;
    int64 start_time = 5;
    int64 end_time = 6;
    int32 current_frame_id = 7;
    string reason = 8;
}

message FrameMessage {
    int32 frame_id = 1;
    int32 recv_tick_ms = 2;
    int32 valid_data_count = 3;
    repeated RelayData data_collection = 4;
}

message RelayData {
    int32 sequence_id = 1;
    int32 player_id = 2;
    int32 delay_ms = 3;
    int32 flag = 4;
    bytes data = 5;
}

message InputMessage {
    enum InputFlag {
        None = 0;
        Subscribe = 1;
        DuplicateUpstream = 16;
    }

    int32 sequence_id = 1;
    int64 timestamp = 2;
    bytes data = 3;
    InputFlag flag = 4;
}

message BroadcastMessage {
    int32 player_id = 1;
    bytes data = 2;
}

// ==================== 顶层消息 ====================

message LockStepMessage {
    enum MessageType {
        UNKNOWN = 0;
        LOGIN_REQ = 1;
        LOGIN_RESP = 2;
        LOGOUT_REQ = 3;
        LOGOUT_RESP = 4;
        READY_REQ = 5;
        READY_RESP = 6;
        BROADCAST_REQ = 7;
        BROADCAST_RESP = 8;
        FRAME_REQ = 9;
        FRAME_RESP = 10;
        GAME_START = 11;
        FRAME = 12;
        INPUT = 13;
        PLAYER_STATE = 14;
        ROOM_STATE = 15;
        BROADCAST = 16;
    }

    MessageType type = 1;

    oneof body {
        LoginRequest login_req = 2;
        LoginResponse login_resp = 3;
        LogoutRequest logout_req = 4;
        LogoutResponse logout_resp = 5;
        ReadyRequest ready_req = 6;
        ReadyResponse ready_resp = 7;
        BroadcastRequest broadcast_req = 8;
        BroadcastResponse broadcast_resp = 9;
        FrameRequest frame_req = 10;
        FrameResponse frame_resp = 11;
        GameStartMessage game_start = 12;
        FrameMessage frame = 13;
        InputMessage input = 14;
        PlayerStateMessage player_state = 15;
        RoomStateMessage room_state = 16;
        BroadcastMessage broadcast = 17;
    }
}
