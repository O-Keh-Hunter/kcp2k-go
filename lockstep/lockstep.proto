syntax = "proto3";

package lockstep;

option go_package = "github.com/O-Keh-Hunter/kcp2k-go/lockstep";

// 基础类型定义
message PlayerInput {
    uint32 player_id = 1;
    bytes data = 2;
    uint32 flag = 3;
}

message FrameMetadata {
    int64 timestamp = 1;
    map<uint32, PlayerState> player_states = 2;
    RoomState room_state = 3;
}

message Frame {
    uint32 id = 1;
    repeated PlayerInput inputs = 2;
    FrameMetadata metadata = 3;
}

message PlayerState {
    uint32 id = 1;
    bool online = 2;
    int64 last_frame_id = 3;
    int64 ping = 4;
    int64 last_ping_time = 5;
}

message RoomState {
    uint32 status = 1;
    uint32 current_players = 2;
    uint32 max_players = 3;
    int64 start_time = 4;
    int64 end_time = 5;
    uint32 current_frame_id = 6;
}

// 请求和响应消息
message FrameRequest {
    uint32 player_id = 1;
    uint32 start_id = 2;
    uint32 end_id = 3;
    int64 timestamp = 4;
}

message FrameResponse {
    repeated Frame frames = 1;
    bool success = 2;
    string error = 3;
}

message JoinRoomRequest {
    string room_id = 1;
    uint32 player_id = 2;
}

message PingMessage {
    int64 timestamp = 1;
    uint32 player_id = 2;
}

message PongMessage {
    int64 timestamp = 1;
    uint32 player_id = 2;
}

// 主要的网络消息
message LockStepMessage {
    enum MessageType {
        UNKNOWN = 0;
        FRAME = 1;
        INPUT = 2;
        JOIN_ROOM = 3;
        LEAVE_ROOM = 4;
        FRAME_REQ = 5;
        FRAME_RESP = 6;
        PING = 7;
        PONG = 8;
        START = 9;
        END = 10;
        PLAYER_STATE = 11;
        ROOM_STATE = 12;
        ERROR = 13;
    }
    
    MessageType type = 1;
    bytes payload = 2;
}

// 输入消息
message InputMessage {
    uint32 frame_id = 1;
    bytes data = 2;
    uint32 flag = 3;
}

// 游戏开始消息
message GameStartMessage {
    uint32 current_frame_id = 1;
    bool game_already_running = 2;
}

// 玩家状态消息
message PlayerStateMessage {
    uint32 player_id = 1;
    PlayerState state = 2;
    string reason = 3; // 状态变更原因
}

// 房间状态消息
message RoomStateMessage {
    string room_id = 1;
    RoomState state = 2;
    string reason = 3; // 状态变更原因
}

// 错误消息
message ErrorMessage {
    uint32 code = 1;
    string message = 2;
    string details = 3;
}

// 房间配置（用于创建房间）
message RoomConfig {
    uint32 max_players = 1;
    uint32 min_players = 2;
    uint32 frame_rate = 3;
    uint32 retry_window = 4;
}

// 服务器统计信息
message ServerStats {
    uint32 rooms = 1;
    uint32 total_players = 2;
    bool running = 3;
    int64 uptime = 4;
}